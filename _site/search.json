[
  {
    "objectID": "fixest.html",
    "href": "fixest.html",
    "title": "fixest",
    "section": "",
    "text": "fixest (by Laurent Bergé) is a package designed from the ground up in C++ to make running regressions fast and incredibly easy. It provides built-in support for a variety of linear and nonlinear models, as well as regression tables and plotting methods.\n\n\n\nR\n\n1+1\n\n\n[1] 2",
    "crumbs": [
      "Regression analysis with `fixest`"
    ]
  },
  {
    "objectID": "data_table.html",
    "href": "data_table.html",
    "title": "data.table",
    "section": "",
    "text": "Stata found at /Applications/Stata/StataIC.app/Contents/MacOS/StataIC\n\n\nThe 'stata' engine is ready to use.\ndata.table (by Matt Dowle, Arun Srinivasan et. al.) is a package written in C to make high-performance data wrangling tasks a breeze. Despite being incredibly powerful, it is dependency free and has a rock-solid API. data.table code reliably works decades apart.",
    "crumbs": [
      "Data wrangling with `data.table`"
    ]
  },
  {
    "objectID": "data_table.html#installation",
    "href": "data_table.html#installation",
    "title": "data.table",
    "section": "Installation",
    "text": "Installation\nBefore continuing, make sure that you have installed data.table. You only have to do this once (or as often as you want to update the package).\n\n# Install from CRAN\ninstall.packages(\"data.table\")\n\n# Alternatively, you can install the latest development version\n# install.packages(\"data.table\", repos = \"https://fastverse.r-universe.dev\")\n\nOnce data.table is installed, don’t forget to load it whenever you want to use it. Unlike Stata, you have to re-load a package every time you start a new R session.\n\n# Load data.table into our current R session\nlibrary(data.table)\n\nAll of the examples in this section will use real-life 2014 New York air traffic data. You can use the following commands to import the dataset into both Stata and R.\n\n\n\nimport delimited using ///\n    \"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv\", clear\n\n&gt;     \"https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv\", clear\n(11 vars, 253,316 obs)\n\n\n\nlibrary(data.table) ## Don't forget to load the library\ndat = fread('https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv')\n\n\n\nThe data looks like this\n\n\n\n\n\nyear\nmonth\nday\ndep_delay\narr_delay\ncarrier\norigin\ndest\nair_time\ndistance\nhour\n\n\n\n\n2014\n1\n1\n14\n13\nAA\nJFK\nLAX\n359\n2475\n9\n\n\n2014\n1\n1\n-3\n13\nAA\nJFK\nLAX\n363\n2475\n11\n\n\n2014\n1\n1\n2\n9\nAA\nJFK\nLAX\n351\n2475\n19\n\n\n2014\n1\n1\n-8\n-26\nAA\nLGA\nPBI\n157\n1035\n7\n\n\n2014\n1\n1\n2\n1\nAA\nJFK\nLAX\n350\n2475\n13\n\n\n2014\n1\n1\n4\n0\nAA\nEWR\nLAX\n339\n2454\n18",
    "crumbs": [
      "Data wrangling with `data.table`"
    ]
  },
  {
    "objectID": "data_table.html#introduction",
    "href": "data_table.html#introduction",
    "title": "data.table",
    "section": "Introduction",
    "text": "Introduction\nThe data.table package centers around data.tables, which are highly efficient data frames that can be manipulated using the package’s concise syntax. For example, say we have a data.table called dat (you can call it whatever you want). Then we can manipulate it by putting arguments into its square brackets, i.e. dat[]. The three main components of a data.table operation are i, j, and by, which go in the order dat[i, j, by]. Note you don’t have to specify the latter two if you’re not currently using them.\n\ni, the first component, selects the rows of the data.table that you’ll be working with, like how in Stata the if or in command options let you refer to certain rows.\nj, the second component, both selects and operates on the columns of the data.table, like how in Stata the keep or drop commands select specific columns of your data, or how generate or replace create or modify columns in your data.\nby, the third component, gives the variable(s) designating groups that you’ll be doing your calculations within, like how in Stata you can precede a command with bysort.\n\ndata.table uses these simple components very flexibly. The upshot is that you can perform complicated operations in a single line of concise data.table code, which may have required multiple commands in other languages or libraries to accomplish. But even if you aren’t doing anything fancy, data.table has you covered with a stable set of functions that can be deployed on virtually any data wrangling task.\nLike Stata, data.table also provides some special shortcut symbols for common operations. For example, _N in Stata is equivalent to .N in data.table, while .(x1, x2) is short for list(x1, x2). We’ll see more examples in cheatsheat that follows. But we do want to quickly highlight one special symbol in particular: .SD refers to the (S)ubset of (D)ata you’re working with. This can be used to do complex within-group calculations when you have by specified. But more generally it’s a way to perform operations on lots of columns with one line of code. By default, .SD refers to all columns in the dataset (excepting those in by). But you can specify the columns you want with the .SDcols argument. Again, we’ll see a bunch of examples below.\nFinally, data.table is extremely fast. It has long set the standard for in-memory data wrangling benchmarks across a variety of libraries and languages. You will likely see an order(s) of magnitude performance difference as you compare the code chunks below. As a bonus for Stata users, who are used to operations changing a single dataset in memory, many data.table operations can be done in-place. This means that you don’t have to (re)assign the result to a new data.table. In-place modifications are also very efficient, since they will only affect the parts you’re actually changing, without wasting memory and time on the parts that aren’t being changed. Any time in the below cheat sheet you see a function with the word set in it, or the := operator, that’s an in-place operation.",
    "crumbs": [
      "Data wrangling with `data.table`"
    ]
  },
  {
    "objectID": "data_table.html#data-io",
    "href": "data_table.html#data-io",
    "title": "data.table",
    "section": "Data I/O",
    "text": "Data I/O\nLike Stata’s .dta file format, R has its own native .rds storage format. (See also the fst package.) However, we generally recommend that users avoid native—especially proprietary—data types since they hamper interoperability and reproducibility. We’ll hence concentrate on common open-source file types below. We’ll make an exception for .dta given our target audience, but we still recommend avoiding it if possible. Note that all of the examples in this section will assume generic datasets.\n\nRead and write .csv\nSingle file.\n\n\n\nimport delimited using \"file.csv\", clear \n* import delimited using \"file.csv\", clear colrange(1:2)\n* ?\n\nexport delimited using \"file.csv\", replace\n\n\ndat = fread(\"file.csv\")\n# dat = fread(\"file.csv\", select=c(\"col1\",\"col2\")) # or select=1:2\n# dat = fread(\"file.csv\", drop=c(\"col3\",\"col4\")) # or drop=3:4\n\nfwrite(dat, \"file.csv\")\n\n\n\nRead many files and append them together.\n\n\n\nlocal files: dir \"data/\" files \"*.csv\"\ntempfile mytmpfile\nsave `mytmpfile', replace empty\nforeach x of local files {\n    qui: import delimited \"data/`x'\", case(preserve) clear\n    append using `mytmpfile'\n    save `mytmpfile', replace\n}\n\n\nfiles = dir(\"data/\", pattern=\".csv\", full.names=TRUE)\ndat = rbindlist(lapply(files, fread))\n\n\n\n\n\nRead and write .dta\n\n\nNote: .dta is Stata’s native (proprietary) filetype.\nNote: These commands require the haven package.\n\n\nSingle file.\n\n\n\nuse \"file.dta\", clear\n* use \"file.dta\", keep(var1-var4) clear\n\n\nsave \"file.dta\", replace\n\n\ndat = haven::read_dta(\"file.dta\")\n# dat = haven::read_dta(\"file.dta\", col_select=var1:var4)\nsetDT(dat) # i.e. Set as a data.table\n \nhaven::write_dta(dat, \"file.dta\")\n\n\n\nRead many files and append them together.\n\n\n\ncd \"`c(pwd)'/data\"\nappend using `: dir \".\" files \"*.dta\"' \n\n\nfiles = dir(\"data/\", pattern=\".dta\", full.names=TRUE)\ndat = rbindlist(lapply(files, haven::read_dta))\n\n\n\n\n\nRead and write .parquet\n\n\nNote: Stata currently has limited support for parquet files (and Linux/Unix only).\nNote: These commands require the arrow package.\n\n\n\n\n\n* See: https://github.com/mcaceresb/stata-parquet\n\n\nfiles = dir(pattern = \".parquet\") \ndat = rbindlist(lapply(files, arrow::read_parquet))\n# dat = rbindlist(lapply(files, arrow::read_parquet, col_select=1:10))\n\nwrite_parquet(dat, sink = \"file.parquet\")\n\n\n\n\n\nCreate a dataset de novo\nRandom numbers. Note that the random seeds will be different across the two languages.\n\n\n\nclear\nset seed 123\nset obs 10\ngen x = _n\ngen y = rnormal()\ngen z = runiform()\n\n\nset.seed(123)\nd = data.table(x = 1:10, y = rnorm(10), z = runif(10))\n\n\n\nSome convenience functions for specific data types.\n\n\n\n* All combinations of two vectors (i.e. a cross-join)\nclear\nset obs 10\ngen id = _n in 1/2\ngen yr = 2000 + _n\nfillin id yr\ndrop if id == . | yr == .\n\n\n# All combinations of two vectors (i.e. a cross-join)\nd = CJ(id = 1:2, yr = 2001:2010)\n\n\n* Datetimes\n* ?\n* ?\n\n\n# Datetime\ndts = Sys.time() + 0:10 # time right now ++10 seconds\nd = IDateTime(dts)",
    "crumbs": [
      "Data wrangling with `data.table`"
    ]
  },
  {
    "objectID": "data_table.html#order",
    "href": "data_table.html#order",
    "title": "data.table",
    "section": "Order",
    "text": "Order\n\nSort rows\n\n\n\nsort air_time \nlist in 1/5\n\n     | year   month   day   dep_de~y   arr_de~y   carrier   origin   dest   air_time   distance   hour |\n     |-------------------------------------------------------------------------------------------------|\n  1. | 2014       6    20         -6         -2        US      LGA    BOS         20        184     14 |\n  2. | 2014       2    21         46         40        EV      EWR    BDL         20        116      9 |\n  3. | 2014       3     4         17         -4        EV      EWR    BDL         21        116     22 |\n  4. | 2014       1    16         -3        -12        EV      EWR    BDL         21        116     11 |\n  5. | 2014       2    19         19          0        EV      EWR    BDL         21        116      8 |\n     +-------------------------------------------------------------------------------------------------+\n\n\n\nsetorder(dat, air_time)\nhead(dat)\n\n    year month   day dep_delay arr_delay carrier origin   dest air_time distance  hour\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n1:  2014     2    21        46        40      EV    EWR    BDL       20      116     9\n2:  2014     6    20        -6        -2      US    LGA    BOS       20      184    14\n3:  2014     1    16        -3       -12      EV    EWR    BDL       21      116    11\n4:  2014     1    16        10        14      EV    EWR    BDL       21      116     8\n5:  2014     2    19        19         0      EV    EWR    BDL       21      116     8\n6:  2014     2    26        38        20      EV    EWR    BDL       21      116    23\n\n\n\nsort air_time dest \nlist in 1/5\n\n     | year   month   day   dep_de~y   arr_de~y   carrier   origin   dest   air_time   distance   hour |\n     |-------------------------------------------------------------------------------------------------|\n  1. | 2014       2    21         46         40        EV      EWR    BDL         20        116      9 |\n  2. | 2014       6    20         -6         -2        US      LGA    BOS         20        184     14 |\n  3. | 2014       6     5         16          4        EV      EWR    BDL         21        116     22 |\n  4. | 2014       1    16         -3        -12        EV      EWR    BDL         21        116     11 |\n  5. | 2014       1    16         10         14        EV      EWR    BDL         21        116      8 |\n     +-------------------------------------------------------------------------------------------------+\n\n\n\nsetorder(dat, air_time, dest) \nhead(dat)\n\n    year month   day dep_delay arr_delay carrier origin   dest air_time distance  hour\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n1:  2014     2    21        46        40      EV    EWR    BDL       20      116     9\n2:  2014     6    20        -6        -2      US    LGA    BOS       20      184    14\n3:  2014     1    16        -3       -12      EV    EWR    BDL       21      116    11\n4:  2014     1    16        10        14      EV    EWR    BDL       21      116     8\n5:  2014     2    19        19         0      EV    EWR    BDL       21      116     8\n6:  2014     2    26        38        20      EV    EWR    BDL       21      116    23\n\n\n\ngsort -air_time\nlist in 1/5\n\n     | year   month   day   dep_de~y   arr_de~y   carrier   origin   dest   air_time   distance   hour |\n     |-------------------------------------------------------------------------------------------------|\n  1. | 2014       3     2         24         87        UA      EWR    HNL        706       4963      9 |\n  2. | 2014       3     2         -1         64        HA      JFK    HNL        704       4983      8 |\n  3. | 2014       3     4         -1         61        UA      EWR    HNL        697       4963      9 |\n  4. | 2014       3     3        -11         75        HA      JFK    HNL        690       4983      8 |\n  5. | 2014       3    22         -3         40        HA      JFK    HNL        689       4983      9 |\n     +-------------------------------------------------------------------------------------------------+\n\n\n\nsetorder(dat, -air_time)\nhead(dat)\n\n    year month   day dep_delay arr_delay carrier origin   dest air_time distance  hour\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n1:  2014     3     2        24        87      UA    EWR    HNL      706     4963     9\n2:  2014     3     2        -1        64      HA    JFK    HNL      704     4983     8\n3:  2014     3     4        -1        61      UA    EWR    HNL      697     4963     9\n4:  2014     3     3       -11        75      HA    JFK    HNL      690     4983     8\n5:  2014     3    22        -3        40      HA    JFK    HNL      689     4983     9\n6:  2014     1    26        13        58      UA    EWR    HNL      688     4963     9\n\n\n\n\n\n\nSort columns\n\n\n\norder month day\nlist in 1/5\n\n     | month   day   year   dep_de~y   arr_de~y   carrier   origin   dest   air_time   distance   hour |\n     |-------------------------------------------------------------------------------------------------|\n  1. |     1     1   2014         14         13        AA      JFK    LAX        359       2475      9 |\n  2. |     1     1   2014         -3         13        AA      JFK    LAX        363       2475     11 |\n  3. |     1     1   2014          2          9        AA      JFK    LAX        351       2475     19 |\n  4. |     1     1   2014         -8        -26        AA      LGA    PBI        157       1035      7 |\n  5. |     1     1   2014          2          1        AA      JFK    LAX        350       2475     13 |\n     +-------------------------------------------------------------------------------------------------+\n\n\n\nsetcolorder(dat, c('month','day'))\nhead(dat)\n\n   month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n6:     1    26  2014        13        58      UA    EWR    HNL      688     4963     9\n\n\n\n\n\n\nRename columns\n\n\n\n* rename (old) (new) \n\nrename arr_delay arrival_delay \nrename (carrier origin) (carrier_code origin_code) \nrename arr_* arrival_*\n\n\n# setnames(dat, old = ..., new = ...) \n\nsetnames(dat, 'arr_delay', 'arrival_delay') \nsetnames(dat, c('carrier','origin'), c('carrier_code','origin_code')) \nsetnames(dat, gsub('arr_', 'arrival_', names(dat)))",
    "crumbs": [
      "Data wrangling with `data.table`"
    ]
  },
  {
    "objectID": "data_table.html#subset",
    "href": "data_table.html#subset",
    "title": "data.table",
    "section": "Subset",
    "text": "Subset\nIn newer versions of Stata, it’s possible to keep multiple datasets in memory, or “frames” as Stata calls them. But this still requires extra steps that would be unusual to users of other languages. In contrast, keeping multiple datasets in memory is extremely common in R. Moreover, subsetting and collapsing operations don’t overwrite your original dataset. The upshot is that you don’t need to wrap everything in preserve/restore. However, it also means that you’ll need to (re)assign your subsetted/collapsed data if you want to use it again later. E.g. dat1 = dat[origin=='LGA'].\n\nSubset rows\n\n\n\nReminder: You’ll need to use preserve/restore if you want to retain the original dataset in the examples that follow.\n\nkeep in 1/200 \n\n(253,116 observations deleted)\n\n\n\n\nReminder: You’ll need to (re)assign the subsetted dataset if you want to use it later, e.g. dat1 = dat[...].\n\ndat[1:200] \n\n     month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n     &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n  1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n  2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n  3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n  4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n  5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n ---                                                                                    \n196:     6     7  2014        -8        10      HA    JFK    HNL      624     4983     9\n197:     9    13  2014        -2         8      HA    JFK    HNL      624     4983     9\n198:     9    15  2014        -6         0      UA    EWR    HNL      624     4962     9\n199:    10     4  2014         0        11      HA    JFK    HNL      624     4983    10\n200:     1    12  2014         6       -20      UA    EWR    HNL      623     4963     9\n\n\n\n\nkeep if day &gt; 5 & day &lt; 10\n\n(219,414 observations deleted)\n\n\n\ndat[day &gt; 5 & day &lt; 10] \n\n       month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n       &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n    1:     2     7  2014         8        59      HA    JFK    HNL      685     4983     9\n    2:     2     9  2014         2        44      HA    JFK    HNL      675     4983     9\n    3:     2     8  2014        -8        28      HA    JFK    HNL      673     4983     8\n    4:     2     6  2014         1        25      UA    EWR    HNL      669     4963     9\n    5:     2     7  2014        -5        10      UA    EWR    HNL      667     4963     9\n   ---                                                                                    \n33898:     6     8  2014        -6        -5      EV    EWR    BDL       23      116     8\n33899:     9     7  2014        -9       -30      EV    EWR    BDL       23      116    22\n33900:     2     6  2014        24        12      EV    EWR    BDL       22      116    12\n33901:     6     6  2014        -1       -12      EV    EWR    BDL       22      116    22\n33902:     9     8  2014        -5       -24      EV    EWR    BDL       22      116    21\n\n\n\nkeep if inrange(day,5,10)\n\n(203,042 observations deleted)\n\n\n\ndat[between(day,5,10)] # Or: dat[day %in% 5:10] \n\n       month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n       &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n    1:     2     7  2014         8        59      HA    JFK    HNL      685     4983     9\n    2:     2     9  2014         2        44      HA    JFK    HNL      675     4983     9\n    3:     2     8  2014        -8        28      HA    JFK    HNL      673     4983     8\n    4:     2     6  2014         1        25      UA    EWR    HNL      669     4963     9\n    5:     2     7  2014        -5        10      UA    EWR    HNL      667     4963     9\n   ---                                                                                    \n50270:     2     6  2014        24        12      EV    EWR    BDL       22      116    12\n50271:     6     6  2014        -1       -12      EV    EWR    BDL       22      116    22\n50272:     9     8  2014        -5       -24      EV    EWR    BDL       22      116    21\n50273:     6     5  2014       105        93      EV    EWR    BDL       21      116    14\n50274:     6     5  2014        16         4      EV    EWR    BDL       21      116    22\n\n\n\nkeep if origin == \"LGA\"\n\n(168,883 observations deleted)\n\n\n\ndat[origin=='LGA']\n\n       month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n       &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n    1:     6    23  2014        -5        83      WN    LGA    DEN      327     1620    15\n    2:     5    11  2014        10        59      DL    LGA    DEN      294     1620    17\n    3:     5    11  2014        59       115      WN    LGA    DEN      292     1620    18\n    4:     1    31  2014        73       121      UA    LGA    DEN      291     1620    12\n    5:     5    11  2014        70       138      UA    LGA    DEN      287     1620    16\n   ---                                                                                    \n84429:     7    15  2014        -7       -24      US    LGA    PHL       25       96     5\n84430:     8    24  2014        -1       -16      US    LGA    PHL       25       96     5\n84431:     9    28  2014        -4       -28      US    LGA    PHL       25       96    20\n84432:     5    31  2014       -12       -17      US    LGA    BOS       23      184     7\n84433:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14\n\n\n\nkeep if regexm(origin,\"LGA\") \n\n(168,883 observations deleted)\n\n\n\ndat[origin %like% 'LGA'] \n\n       month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n       &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n    1:     6    23  2014        -5        83      WN    LGA    DEN      327     1620    15\n    2:     5    11  2014        10        59      DL    LGA    DEN      294     1620    17\n    3:     5    11  2014        59       115      WN    LGA    DEN      292     1620    18\n    4:     1    31  2014        73       121      UA    LGA    DEN      291     1620    12\n    5:     5    11  2014        70       138      UA    LGA    DEN      287     1620    16\n   ---                                                                                    \n84429:     7    15  2014        -7       -24      US    LGA    PHL       25       96     5\n84430:     8    24  2014        -1       -16      US    LGA    PHL       25       96     5\n84431:     9    28  2014        -4       -28      US    LGA    PHL       25       96    20\n84432:     5    31  2014       -12       -17      US    LGA    BOS       23      184     7\n84433:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14\n\n\n\nkeep if inlist(month,3,4,11,12) \n\n(201,305 observations deleted)\n\n\n\ndat[month %in% c(3,4,11,12)] \n\n       month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n       &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n    1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n    2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n    3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n    4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n    5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n   ---                                                                                    \n52007:     3     3  2014         9         7      EV    EWR    BDL       25      116    22\n52008:     3     8  2014        -2         7      EV    EWR    BDL       25      116    18\n52009:     3     3  2014         8       -18      EV    EWR    BDL       23      116     8\n52010:     3     5  2014        -2       -27      EV    EWR    BDL       23      116     7\n52011:     3     4  2014        17        -4      EV    EWR    BDL       21      116    22\n\n\n\nkeep if inlist(origin,\"JFK\",\"LGA\") \n\n(87,400 observations deleted)\n\n\n\ndat[origin %chin% c(\"JFK\",\"LGA\")] # %chin% is a fast %in% for (ch)aracters \n\n        month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n     2:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n     3:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n     4:     2     7  2014         8        59      HA    JFK    HNL      685     4983     9\n     5:     2    15  2014        -7        50      HA    JFK    HNL      682     4983     8\n    ---                                                                                    \n165912:     7    15  2014        -7       -24      US    LGA    PHL       25       96     5\n165913:     8    24  2014        -1       -16      US    LGA    PHL       25       96     5\n165914:     9    28  2014        -4       -28      US    LGA    PHL       25       96    20\n165915:     5    31  2014       -12       -17      US    LGA    BOS       23      184     7\n165916:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14\n\n\n\ndrop if month == 1\n\n(22,796 observations deleted)\n\n\n\ndat[month!=1]\n\n        month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n     2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n     3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n     4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n     5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n    ---                                                                                    \n230516:     6    26  2014        19        13      EV    EWR    BDL       21      116    13\n230517:     9    11  2014        38        16      EV    EWR    BDL       21      116    23\n230518:     9    13  2014        -4       -21      EV    EWR    BDL       21      116    20\n230519:     2    21  2014        46        40      EV    EWR    BDL       20      116     9\n230520:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14\n\n\n\n\n\n\nSubset columns\n\n\n\nReminder: You’ll need to use preserve/restore if you want to retain the original dataset in the examples that follow.\n\nkeep month day carrier\n\n\n\nReminder: You’ll need to (re)assign the subsetted dataset if you want to use it later, e.g. dat1 = dat[...].\n\ndat[, .(month, day, carrier)] \n\n        month   day carrier\n        &lt;int&gt; &lt;int&gt;  &lt;char&gt;\n     1:     3     2      UA\n     2:     3     2      HA\n     3:     3     4      UA\n     4:     3     3      HA\n     5:     3    22      HA\n    ---                    \n253312:     6    26      EV\n253313:     9    11      EV\n253314:     9    13      EV\n253315:     2    21      EV\n253316:     6    20      US\n\n\n\n\n \n\n\ndat[, list(month, day, carrier)]    # another option\ndat[, c('month', 'day', 'carrier')] # and another\n\n\n\n\n\n\nkeep year-arr_delay\n\n\ndat[, year:arr_delay] \n\n         year dep_delay arr_delay\n        &lt;int&gt;     &lt;int&gt;     &lt;int&gt;\n     1:  2014        24        87\n     2:  2014        -1        64\n     3:  2014        -1        61\n     4:  2014       -11        75\n     5:  2014        -3        40\n    ---                          \n253312:  2014        19        13\n253313:  2014        38        16\n253314:  2014        -4       -21\n253315:  2014        46        40\n253316:  2014        -6        -2\n\n\n\nkeep *_delay\n\n\ndat[, .SD, .SDcols=patterns('*_delay')]\n\n        dep_delay arr_delay\n            &lt;int&gt;     &lt;int&gt;\n     1:        24        87\n     2:        -1        64\n     3:        -1        61\n     4:       -11        75\n     5:        -3        40\n    ---                    \n253312:        19        13\n253313:        38        16\n253314:        -4       -21\n253315:        46        40\n253316:        -6        -2\n\n\n\n\n\n\n\ndrop origin dest \n\n\ndat[, -c('origin', 'dest')]\n## dat[, c('origin', 'dest') := NULL] # same, but in-place\n\n        month   day  year dep_delay arr_delay carrier air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      UA      706     4963     9\n     2:     3     2  2014        -1        64      HA      704     4983     8\n     3:     3     4  2014        -1        61      UA      697     4963     9\n     4:     3     3  2014       -11        75      HA      690     4983     8\n     5:     3    22  2014        -3        40      HA      689     4983     9\n    ---                                                                      \n253312:     6    26  2014        19        13      EV       21      116    13\n253313:     9    11  2014        38        16      EV       21      116    23\n253314:     9    13  2014        -4       -21      EV       21      116    20\n253315:     2    21  2014        46        40      EV       20      116     9\n253316:     6    20  2014        -6        -2      US       20      184    14\n\n\n\nds, has(type string) \ndrop `r(varlist)' \n\ncarrier  origin   dest\n\n\n\n# Matches the two lines on the left:\ndat[, .SD, .SDcols=!is.character] \n\nIndex: &lt;month&gt;\n        month   day  year dep_delay arr_delay air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      706     4963     9\n     2:     3     2  2014        -1        64      704     4983     8\n     3:     3     4  2014        -1        61      697     4963     9\n     4:     3     3  2014       -11        75      690     4983     8\n     5:     3    22  2014        -3        40      689     4983     9\n    ---                                                              \n253312:     6    26  2014        19        13       21      116    13\n253313:     9    11  2014        38        16       21      116    23\n253314:     9    13  2014        -4       -21       21      116    20\n253315:     2    21  2014        46        40       20      116     9\n253316:     6    20  2014        -6        -2       20      184    14\n\n\n\nds, has(type int) \nkeep `r(varlist)'\n\nyear       dep_delay  arr_delay  air_time   distance\n\n\n\n# Matches the two lines on the left: \ndat[, .SD, .SDcols=is.integer]\n\nIndex: &lt;month&gt;\n        month   day  year dep_delay arr_delay air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      706     4963     9\n     2:     3     2  2014        -1        64      704     4983     8\n     3:     3     4  2014        -1        61      697     4963     9\n     4:     3     3  2014       -11        75      690     4983     8\n     5:     3    22  2014        -3        40      689     4983     9\n    ---                                                              \n253312:     6    26  2014        19        13       21      116    13\n253313:     9    11  2014        38        16       21      116    23\n253314:     9    13  2014        -4       -21       21      116    20\n253315:     2    21  2014        46        40       20      116     9\n253316:     6    20  2014        -6        -2       20      184    14\n\n\n\n\n\n\nSubset rows and columns\n\n\nReminder: You’ll need to use preserve/restore if you want to retain the original dataset in the examples that follow.\nReminder: You’ll need to (re)assign the subsetted dataset if you want to use it later, e.g. dat1 = dat[...].\n\nkeep if origin == \"LGA\"\nkeep month day carrier\n\n(168,883 observations deleted)\n\n\n\n# Matches the two lines on the left:\ndat[origin==\"LGA\", .(month, day, carrier)]\n\n       month   day carrier\n       &lt;int&gt; &lt;int&gt;  &lt;char&gt;\n    1:     6    23      WN\n    2:     5    11      DL\n    3:     5    11      WN\n    4:     1    31      UA\n    5:     5    11      UA\n   ---                    \n84429:     7    15      US\n84430:     8    24      US\n84431:     9    28      US\n84432:     5    31      US\n84433:     6    20      US\n\n\n\n\n\n\nDrop duplicates\n\n\nReminder: You’ll need to use preserve/restore if you want to retain the original dataset in the examples that follow.\nReminder: You’ll need to (re)assign the subsetted dataset if you want to use it later, e.g. dat1 = dat[...].\n\nduplicates drop\n\nDuplicates in terms of all variables\n\n(1 observation deleted)\n\n\n\nunique(dat)\n\n        month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n     2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n     3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n     4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n     5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n    ---                                                                                    \n253311:     6    26  2014        19        13      EV    EWR    BDL       21      116    13\n253312:     9    11  2014        38        16      EV    EWR    BDL       21      116    23\n253313:     9    13  2014        -4       -21      EV    EWR    BDL       21      116    20\n253314:     2    21  2014        46        40      EV    EWR    BDL       20      116     9\n253315:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14\n\n\n\nduplicates drop month day carrier, force\n\nDuplicates in terms of month day carrier\n\n(249,378 observations deleted)\n\n\n\nunique(dat, by = c('month', 'day', 'carrier'))\n\n      month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n      &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n   1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n   2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n   3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n   4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n   5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n  ---                                                                                    \n3934:     3    18  2014         4        17      OO    LGA    CLE       71      419     9\n3935:     3    25  2014         3       -20      OO    LGA    CLE       70      419     9\n3936:     2    12  2014         4        -4      FL    LGA    CAK       68      397    20\n3937:     2    13  2014       150       120      EV    LGA    CLE       63      419    19\n3938:     3    31  2014        56        50      OO    LGA    CLE       62      419    10\n\n\n\n\n\n\nDrop missing\n\n\n\nReminder: You’ll need to use preserve/restore if you want to retain the original dataset in the examples that follow.\n\nkeep if !missing(dest)\n\n(0 observations deleted)\n\n\n\n\nReminder: You’ll need to (re)assign the subsetted dataset if you want to use it later, e.g. dat1 = dat[...].\n\ndat[!is.na(dest)]\n\n        month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n     2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n     3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n     4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n     5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n    ---                                                                                    \n253312:     6    26  2014        19        13      EV    EWR    BDL       21      116    13\n253313:     9    11  2014        38        16      EV    EWR    BDL       21      116    23\n253314:     9    13  2014        -4       -21      EV    EWR    BDL       21      116    20\n253315:     2    21  2014        46        40      EV    EWR    BDL       20      116     9\n253316:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14\n\n\n\n\n* Requires: ssc inst missings\nmissings dropvars, force \n\nChecking missings in year month day dep_delay arr_delay carrier origin dest air_time distance hour:\n0 observations with missing values\n\nnote: no variables qualify\n\n\n\nna.omit(dat) \n\nIndices: &lt;origin&gt;, &lt;month&gt;\n        month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n     2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n     3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n     4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n     5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n    ---                                                                                    \n253312:     6    26  2014        19        13      EV    EWR    BDL       21      116    13\n253313:     9    11  2014        38        16      EV    EWR    BDL       21      116    23\n253314:     9    13  2014        -4       -21      EV    EWR    BDL       21      116    20\n253315:     2    21  2014        46        40      EV    EWR    BDL       20      116     9\n253316:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14\n\n\n\nmissings air_time dest, force \n\nillegal missings subcommand\nr(198);\n\nr(198);\n\n\n\nna.omit(dat, cols = c('air_time', 'dest')) \n# dat[!is.na(air_time) & !is.na(dest)] # same\n\nIndices: &lt;origin&gt;, &lt;month&gt;\n        month   day  year dep_delay arr_delay carrier origin   dest air_time distance  hour\n        &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;     &lt;int&gt;  &lt;char&gt; &lt;char&gt; &lt;char&gt;    &lt;int&gt;    &lt;int&gt; &lt;int&gt;\n     1:     3     2  2014        24        87      UA    EWR    HNL      706     4963     9\n     2:     3     2  2014        -1        64      HA    JFK    HNL      704     4983     8\n     3:     3     4  2014        -1        61      UA    EWR    HNL      697     4963     9\n     4:     3     3  2014       -11        75      HA    JFK    HNL      690     4983     8\n     5:     3    22  2014        -3        40      HA    JFK    HNL      689     4983     9\n    ---                                                                                    \n253312:     6    26  2014        19        13      EV    EWR    BDL       21      116    13\n253313:     9    11  2014        38        16      EV    EWR    BDL       21      116    23\n253314:     9    13  2014        -4       -21      EV    EWR    BDL       21      116    20\n253315:     2    21  2014        46        40      EV    EWR    BDL       20      116     9\n253316:     6    20  2014        -6        -2      US    LGA    BOS       20      184    14",
    "crumbs": [
      "Data wrangling with `data.table`"
    ]
  },
  {
    "objectID": "extras.html",
    "href": "extras.html",
    "title": "extras",
    "section": "",
    "text": "While we think you can get really far in R with just data.table and fixest, of course these two packages don’t cover everything.\nThis page covers a small list of packages you may find especially useful when getting started with R. We won’t try to cover everything under the sun here. Just a few places to get going. For the rest, well, that’s what StackOverflow or your favourite search engine is for.\nAll of the below packages have far more applications than is shown here. We’ll just provide one or two examples of how each can be used. Finally, don’t forget to install them with install.packages('PKGNAME') and load them with library(PKGNAME). The former command you only have to run once per package (or as often as you want to update it); the latter whenever you want to use a package in a new R session.",
    "crumbs": [
      "Other great packages"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Translating Stata to R",
    "section": "",
    "text": "Welcome. This website is for Stata users who are interested in learning R. But it could also be useful for those going the other way around. We provide side-by-side code snippets for common tasks in both Stata and R, so that users have a dictionary for navigating across the two languages.\nThere are two main pages (✌️📄) on the site:\n\nData wrangling (🗄🧹) with data.table\nRegression analysis (💻📈) with fixest\n\nThere are other great R packages that work well and are easy to use. But data.table and fixest are blazingly fast (🏃🏻💨), extremely powerful (💪🏻😎), and flexible (👌✨). Learning just these two libraries will help you to avoid “package bloat”, enabling you to tackle an exhaustive list of data science and econometric tasks with maximum efficiency.\nSee the icons in the top right corner for various site options. You can search for keywords or commands, change the theme to light or dark mode to suit your preferences, and go to the underlying GitHub repo where all the source code is located. Please let us know if you have suggestions or spot any errors."
  }
]